#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Sep 28 10:57:48 2023

@author: arnaudlemaire
"""

## Code pour examiner les coincidences 


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import csv


###############################################################################
###############################Importing the file##############################
###############################################################################

filepath_0m='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/setup_2/coincidence_test/LSC_self_coincidence_same_length_cables_8ns_coinc_100s/FILTERED/SDataF_LSC_self_coincidence_same_length_cables_8ns_coinc_100s.CSV'
df_0m=pd.read_csv(f'{filepath_0m}', delimiter= ';' )

filepath_0m_board='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/setup_2/coincidence_test/LSC_self_coincidence_same_length_cables_8ns_coinc_on_board_100s/FILTERED/SDataF_LSC_self_coincidence_same_length_cables_8ns_coinc_on_board_100s.CSV'
df_0m_board=pd.read_csv(f'{filepath_0m_board}', delimiter= ';' )

filepath_1m='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/setup_2/coincidence_test/LSC_self_coincidence_1m_cable_20ns_coinc_100s/FILTERED/SDataF_LSC_self_coincidence_1m_cable_20ns_coinc_100s.CSV'
df_1m=pd.read_csv(f'{filepath_1m}', delimiter= ';' )

filepath_1m_board='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/setup_2/coincidence_test/LSC_self_coincidence_1m_cable_24ns_board_coinc_100s/FILTERED/SDataF_LSC_self_coincidence_1m_cable_24ns_board_coinc_100s.CSV'
df_1m_board=pd.read_csv(f'{filepath_1m_board}', delimiter= ';' )

filepath_2m='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/setup_2/coincidence_test/LSC_self_coincidence_2m_cable_24ns_coinc_100s/FILTERED/SDataF_LSC_self_coincidence_2m_cable_24ns_coinc_100s.CSV'
df_2m=pd.read_csv(f'{filepath_2m}', delimiter= ';' )

filepath_2m_board='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/setup_2/coincidence_test/LSC_self_coincidence_2m_cable_24ns_board_coinc_100s/FILTERED/SDataF_LSC_self_coincidence_2m_cable_24ns_board_coinc_100s.CSV'
df_2m_board=pd.read_csv(f'{filepath_2m_board}', delimiter= ';' )

filepath_3m='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/setup_2/coincidence_test/LSC_self_coincidence_3m_cable_24ns_coinc_100s/FILTERED/SDataF_LSC_self_coincidence_3m_cable_24ns_coinc_100s.CSV'
df_3m=pd.read_csv(f'{filepath_3m}', delimiter= ';' )

filepath_3m_board='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/setup_2/coincidence_test/LSC_self_coincidence_3m_cable_24ns_board_coinc_100s/FILTERED/SDataF_LSC_self_coincidence_3m_cable_24ns_board_coinc_100s.CSV'
df_3m_board=pd.read_csv(f'{filepath_3m_board}', delimiter= ';' )

filepath_3m_8ns='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/setup_2/coincidence_test/LSC_self_coincidence_3m_cable_8ns_coinc_100s/FILTERED/SDataF_LSC_self_coincidence_3m_cable_8ns_coinc_100s.CSV'
df_3m_8ns=pd.read_csv(f'{filepath_3m_8ns}', delimiter= ';' )

filepath_3m_8ns_board='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/setup_2/coincidence_test/LSC_self_coincidence_3m_cable_8ns_board_coinc_100s/FILTERED/SDataF_LSC_self_coincidence_3m_cable_8ns_board_coinc_100s.CSV'
df_3m_8ns_board=pd.read_csv(f'{filepath_3m_8ns_board}', delimiter= ';' )


## d pour la fonction densité des histogrammes
d=True


time = 24e-9  ## Choice of the length of the coincidence window in second
coinci_window= time*1e12  ##Conversion in picosecond


## Liste des différences de temps d'arrivée

lis_time_0m=[]
lis_time_0m_board=[]
lis_time_1m=[]
lis_time_1m_board=[]
lis_time_2m=[]
lis_time_2m_board=[]
lis_time_3m=[]
lis_time_3m_board=[]
lis_time_3m_8ns=[]
lis_time_3m_8ns_board=[]


for i in range(len(df_0m.CHANNEL)-1):      #Boucle sur tout le dataframe
    time_diff=df_0m.TIMETAG[i+1] - df_0m.TIMETAG[i]
    if time_diff <coinci_window:
        lis_time_0m.append(time_diff)
        
for i in range(len(df_0m_board.CHANNEL)-1):      #Boucle sur tout le dataframe
    time_diff=df_0m_board.TIMETAG[i+1] - df_0m_board.TIMETAG[i]
    if time_diff <coinci_window:
        lis_time_0m_board.append(time_diff)

for i in range(len(df_1m.CHANNEL)-1):      #Boucle sur tout le dataframe
    time_diff=df_1m.TIMETAG[i+1] - df_1m.TIMETAG[i]
    if time_diff <coinci_window:
        lis_time_1m.append(time_diff)

for i in range(len(df_1m_board.CHANNEL)-1):      #Boucle sur tout le dataframe
    time_diff=df_1m_board.TIMETAG[i+1] - df_1m_board.TIMETAG[i]
    if time_diff <coinci_window:
        lis_time_1m_board.append(time_diff)

for i in range(len(df_2m.CHANNEL)-1):      #Boucle sur tout le dataframe
    time_diff=df_2m.TIMETAG[i+1] - df_2m.TIMETAG[i]
    if time_diff <coinci_window:
        lis_time_2m.append(time_diff)
        
for i in range(len(df_2m_board.CHANNEL)-1):      #Boucle sur tout le dataframe
    time_diff=df_2m_board.TIMETAG[i+1] - df_2m_board.TIMETAG[i]
    if time_diff <coinci_window:
        lis_time_2m_board.append(time_diff)

for i in range(len(df_3m.CHANNEL)-1):      #Boucle sur tout le dataframe
    time_diff=df_3m.TIMETAG[i+1] - df_3m.TIMETAG[i]
    if time_diff <coinci_window:
        lis_time_3m.append(time_diff)

for i in range(len(df_3m_board.CHANNEL)-1):      #Boucle sur tout le dataframe
    time_diff=df_3m_board.TIMETAG[i+1] - df_3m_board.TIMETAG[i]
    if time_diff <coinci_window:
        lis_time_3m_board.append(time_diff)
        
for i in range(len(df_3m_8ns.CHANNEL)-1):      #Boucle sur tout le dataframe
    time_diff=df_3m_8ns.TIMETAG[i+1] - df_3m_8ns.TIMETAG[i]
    if time_diff <coinci_window:
        lis_time_3m_8ns.append(time_diff)
        
for i in range(len(df_3m_8ns_board.CHANNEL)-1):      #Boucle sur tout le dataframe
    time_diff=df_3m_8ns_board.TIMETAG[i+1] - df_3m_8ns_board.TIMETAG[i]
    if time_diff <coinci_window:
        lis_time_3m_8ns_board.append(time_diff)


### Figures

plt.hist(lis_time_0m,label='Same_length', histtype='step',bins=np.linspace(-1000,24000,80) )
plt.hist(lis_time_0m_board,label='Same_length_board', histtype='step',bins=np.linspace(-1000,24000,80) )
plt.hist(lis_time_1m,label='1m_distance', histtype='step',bins=np.linspace(-1000,24000,80) )
plt.hist(lis_time_1m_board,label='1m_distance_board', histtype='step',bins=np.linspace(-1000,24000,80) )
plt.hist(lis_time_2m,label='2m_distance', histtype='step',bins=np.linspace(-1000,24000,80) )
plt.hist(lis_time_2m_board,label='2m_distance_board', histtype='step',bins=np.linspace(-1000,24000,80) )
plt.hist(lis_time_3m,label='3m_distance', histtype='step',bins=np.linspace(-1000,24000,80) )
plt.hist(lis_time_3m_board,label='3m_distance_board', histtype='step',bins=np.linspace(-1000,24000,80) )
plt.hist(lis_time_3m_8ns,label='3m_8ns_coinc_window', histtype='step',bins=np.linspace(-1000,24000,80) )
plt.hist(lis_time_3m_8ns_board,label='3m_8ns_coinc_window_board', histtype='step',bins=np.linspace(-1000,24000,80) )
plt.title('Coincidence_time')
plt.xlabel('Coincidence_time'); plt.ylabel('Counts')
plt.legend(loc='best',fontsize= 'xx-small')
plt.show()
plt.clf()


