#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 19 11:14:18 2023

@author: arnaudlemaire
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import csv

##################################  Function  #################################

#Fonction pour obtenr la liste des énergies sur un fichier CSV contenant les waveforms
def csvReader(filename):
    board,channel,time,energy,energyShort,flags,probeCode,waveform = [],[],[],[],[],[],[],[]

    
    with open(filename) as csvDataFile:
            csv_reader = csv.reader(csvDataFile, delimiter = ';')
            csv_reader.__next__()   #skips the first line in the document
            for row in csv_reader:
                #print(row)
                board.append(int(row[0]))
                channel.append(int(row[1]))
                time.append(int(row[2]))
                energy.append(int(row[3]))
                energyShort.append(int(row[4]))
                flags.append(row[5])
                probeCode.append(int(row[6]))
                waveform.append(list(map(int,row[7:])))
                
    df = pd.DataFrame()
    
    df['Board'],df['Channel'],df['Time'],df['Energy'],df['Energy Short'],df['Flags'],df['Probe Cobe'],df['Waveform'] = board,channel,time,energy,energyShort,flags,probeCode,waveform
    return df

###Importation du fichier de réfèrence pour le liquid scintillateur

filepath_1200lsb='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/setup_2/80_50d/Setup2_UG_1200V_80d_50d_240nsCoMPASS_1500_200lsb_15h/RAW/SDataR_Setup2_UG_1200V_80d_50d_240nsCoMPASS_1500_200lsb_15h.CSV'
df_1200=pd.read_csv(f'{filepath_1200lsb}', delimiter= ';' )

###############################################################################
###############################Importing the file##############################
###############################################################################

filepath='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/setup_2/80_50d/Setup2_UG_1200V_80d_50d_240nsCoMPASS_1500_200lsb_15h/FILTERED/SDataF_Setup2_UG_1200V_80d_50d_240nsCoMPASS_1500_200lsb_15h.CSV'
df=pd.read_csv(f'{filepath}', delimiter= ';' )

## d pour la fonction densité des histogrammes
d=True

################################ Calibration files ###############################
filepath_SiPM_2 ='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/calibration/SDataR_BlackTapeSiPM_Cs137_calibration_2.CSV'
SiPM_2 = pd.read_csv(f'{filepath_SiPM_2}', delimiter= ';' )
filepath_SiPM_4 ='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/calibration/SDataR_NoTapeSiPM_Cs137_calibration.CSV'
SiPM_4 = pd.read_csv(f'{filepath_SiPM_4}', delimiter= ';' )
filepath_LSC ='/Users/arnaudlemaire/ECL/Queens/Experiment/LS/ComptonNewDAQ/calibration/SDataR_LSC_Cs137_calibration_80LSB.CSV'
LSC = pd.read_csv(f'{filepath_LSC}', delimiter= ';' )

################################## Define List #################################

### Définitions de trois dataframes contenant les évenements issus de chaque canaux
df0=df[df['CHANNEL']==0]
df2=df[df['CHANNEL']==2]
df4=df[df['CHANNEL']==4]

df1200_0=df_1200[df_1200['CHANNEL']==0]
################################## Coincidence #################################

Coincidence=[]  #Nouvelle colonne de la voie de coincidence
Energy=[] #Nouvelle colonne de l'énergie de la voie de coincidence
Timetag=[] #Nouvelle colonne du temps d'arrivée de la voie de coincidence
Time_diff=[] #Nouvelle colonne du décalage temporel entre le liquide et la cristal


time = 240e-9  ## Choice of the length of the coincidence window in second
coinci_window= time*1e12  ##Conversion in picosecond


for i in range(len(df.CHANNEL)):      #Boucle sur tout le dataframe
    if df.CHANNEL[i] == 0:            #On regarde tout les évenements du liquide scintillant et on cherche des coincidences avec le canal 2 ou 4
        coinci=[]                     #On crée une colonne pour récupérer le canal coincident
        timetag=[]                    #On crée une colonne pour récupérer le temps du canal coincident
        energy=[]                     #On crée une colonne pour récupérer l'énergie du canal coincident
        time_diff=[]                  #On crée une colonne pour récupérer la différence de temps entre les deux événements
        if  i>0 and (df.TIMETAG[i] - df.TIMETAG[i-1]) <= coinci_window:     #Condition de coincidence
            coinci.append(df.CHANNEL[i-1])
            timetag.append(df.TIMETAG[i-1])
            energy.append(df.ENERGY[i-1])
            time_diff.append(df.TIMETAG[i-1] - df.TIMETAG[i])
        if i<(len(df.CHANNEL)-1) and (df.TIMETAG[i+1] - df.TIMETAG[i]) <= coinci_window:
            coinci.append(df.CHANNEL[i+1])
            timetag.append(df.TIMETAG[i+1])
            energy.append(df.ENERGY[i+1])
            time_diff.append(df.TIMETAG[i+1] - df.TIMETAG[i])
        if i>1 and (df.TIMETAG[i] - df.TIMETAG[i-2]) <= coinci_window:
            coinci.append(df.CHANNEL[i-2])
            timetag.append(df.TIMETAG[i-2])
            energy.append(df.ENERGY[i-2])
            time_diff.append(df.TIMETAG[i-2] - df.TIMETAG[i])
        if i<(len(df.CHANNEL)-2) and (df.TIMETAG[i+2] - df.TIMETAG[i]) <= coinci_window:
            coinci.append(df.CHANNEL[i+2])
            timetag.append(df.TIMETAG[i+2])
            energy.append(df.ENERGY[i+2])
            time_diff.append(df.TIMETAG[i+2] - df.TIMETAG[i])
        if len(coinci)==1:              #Si un seul événement coincide, c'est bon
            Coincidence.append(coinci[0])
            Energy.append(energy[0])
            Timetag.append(timetag[0])
            Time_diff.append(time_diff[0])
        else:                           #Sinon on laisse les valeurs initiales
            Coincidence.append(df.CHANNEL[i])
            Energy.append(df.ENERGY[i])
            Timetag.append(df.TIMETAG[i])
            Time_diff.append(0)
    else:                               #Pour les événements des autres canaux,on ecrit simplement leurs valeurs
        Coincidence.append(df.CHANNEL[i])
        Energy.append(df.ENERGY[i])
        Timetag.append(df.TIMETAG[i])
        Time_diff.append(0)

## Construction de la dataframe de coincidence

df_co=df.assign(COINCIDENCE=Coincidence,ENERGY_CO=Energy,TIMETAG_CO=Timetag,TIME_DIFF=Time_diff)

### Coincidence avec CHANNEL 2
df_co2=df_co[df_co['COINCIDENCE']==2]
### Coincidence avec CHANNEL 4
df_co4=df_co[df_co['COINCIDENCE']==4]


###Counting of wrong coincidence

w2=0
for el in df_co2['CHANNEL']:
    if el == 3:
        w2+=1
print(f'wrong_coincidence_ch2 {w2}')

w4=0
for el in df_co4['CHANNEL']:
    if el == 2:
        w4+=1
print(f'wrong_coincidence_ch4 {w4}')


##Triple Coincidence counting or 0
tr=0
for el in df_co['COINCIDENCE']:
    if el == 0:
        tr+=1
print(f'Triple_or_0_coincidence: {tr}')



### Liquide scintillant Coincidence
df_lsc_co2=df_co2[df_co2['CHANNEL']==0]
print('Number_of_coincidence_CH2'+' '+str(len(df_lsc_co2['CHANNEL'])))
df_lsc_co4=df_co4[df_co4['CHANNEL']==0]
print('Number_of_coincidence_CH4'+' '+str(len(df_lsc_co4['CHANNEL'])))

#%%

###############################################################################
################################## Figures #################################
###############################################################################



###Liquid scintillant total
plt.hist(df0['ENERGY'],label="Coincidence",histtype='step', density = d, bins=200)
plt.hist(df1200_0['ENERGY'],label="Raw_1200lbs",histtype='step', density = d, bins=200)  #Comparaison avec calibration
#plt.hist(LSC['ENERGY'],label="Calibration",histtype='step', density = d, bins=200)
plt.title('Liquid_scintillator_total')
plt.xlabel('Energy'); plt.ylabel('Counts_density')
plt.xlim(0,2000)
plt.legend(loc='best')
plt.show()
plt.clf()

###Channel 2 
plt.hist(df2['ENERGY'],label="Coincidence",histtype='step', density = d,bins=200)
plt.hist(SiPM_2['ENERGY'],label="Calibration",histtype='step', density = d, bins=200)
plt.title('CH2_50°')
plt.xlim(0,3400)
plt.legend(loc='best')
plt.xlabel('Energy'); plt.ylabel('Counts_density')
plt.show()
plt.clf()

###Channel 4
plt.hist(df4['ENERGY'],label="Coincidence",histtype='step', density = d,bins=200)
plt.hist(SiPM_4['ENERGY'],label="Calibration",histtype='step', density = d, bins=200)
plt.title('CH4_80°')
plt.xlim(0,3400)
plt.legend(loc='best')
plt.xlabel('Energy'); plt.ylabel('Counts_density')
plt.show()
plt.clf()

################################## Time Stability #################################

### Channel 2
plt.hist2d(df2['TIMETAG'],df2['ENERGY'], bins=[30,30])
plt.title('Stability_CH2')
plt.xlabel('TIME'); plt.ylabel('ENERGY')
plt.show()
plt.clf()

### Channel 3
plt.hist2d(df4['TIMETAG'],df4['ENERGY'], bins=[30,30])
plt.title('Stability_CH4')
plt.xlabel('TIME'); plt.ylabel('ENERGY')
plt.show()
plt.clf()

###Liquide scintillateur
plt.hist2d(df0['TIMETAG'],df0['ENERGY'], bins=[30,30])
plt.title('Stability_LSC')
plt.xlabel('TIME'); plt.ylabel('ENERGY')
plt.show()
plt.clf()

##################################### Coincidence #####################################


### Liquide scintillateur en coincidence avec le canal 2 ou 4
plt.hist(df_lsc_co2['ENERGY'],histtype='step',density=d,label='Coincidence_with_ch2_50d', bins=100)
plt.hist(df_lsc_co4['ENERGY'],histtype='step',density=d,label='Coincidence_with_ch4_80d', bins=100)
plt.hist(df1200_0['ENERGY'],label="Total_LSC_raw",histtype='step', density =d, bins=100) #Comparaison avec le liquide scintillant sans coincidence
#plt.yscale('log')
plt.xlim(0,700)
plt.ylim(0,0.0045)
plt.title('LSC_Energy_Deposition_Coincidence')
plt.legend(loc='best')
plt.xlabel('Energy'); plt.ylabel('Counts')
plt.show()
plt.clf()


### Figure 2D:Corrélation des énergies: on s'attend à une zone correspondant à la collection totale du gamma
### logscale: norm=matplotlib.colors.LogNorm()
# Channel 2
plt.hist2d(df_lsc_co2['ENERGY'],df_lsc_co2['ENERGY_CO'], bins=[np.linspace(0,1500,30),np.linspace(0,3000,30)])
plt.xlabel('Energy_distribution_LSC'); plt.ylabel('Energy_distribution_CH2_50d')
plt.title('LSC&CH2')
plt.show()
plt.clf()

# Channel 4
plt.hist2d(df_lsc_co4['ENERGY'],df_lsc_co4['ENERGY_CO'], bins=[np.linspace(0,1500,30),np.linspace(0,2500,30)])
plt.xlabel('Energy_distribution_LSC'); plt.ylabel('Energy_distribution_CH4_80d')
plt.title('Energy_correlation_LSC&CH4')
plt.show()
plt.clf()


### Figure 2D Difference temps d'arrivée

plt.hist2d(df_lsc_co2['TIMETAG'],df_lsc_co2['TIME_DIFF'],norm=matplotlib.colors.LogNorm(), bins=[30,np.linspace(-250000,250000,30)])
plt.xlabel('Time_distribution_LSC'); plt.ylabel('Time_difference_between_LSC&CH2')
plt.title('Time_correlation_LSC&CH2_picosecond')
plt.show()
plt.clf()

plt.hist2d(df_lsc_co4['TIMETAG'],df_lsc_co4['TIME_DIFF'],norm=matplotlib.colors.LogNorm(), bins=[30,np.linspace(-250000,250000,30)])
plt.xlabel('Time_distribution_LSC'); plt.ylabel('Time_difference_between_LSC&CH2')
plt.title('Time_correlation_LSC&CH4_picosecond')
plt.show()
plt.clf()

### Figure histogramme des temps d'arrivée

plt.hist(df_lsc_co2['TIME_DIFF'],label='Coincidence_with_ch2_50d', histtype='step',bins=np.linspace(-240000,240000,200) )
plt.hist(df_lsc_co4['TIME_DIFF'],label='Coincidence_with_ch4_80d', histtype='step',bins=np.linspace(-240000,240000,200) )
plt.title('Coincidence_time')
plt.xlabel('Coincidence_time'); plt.ylabel('Counts')
plt.legend(loc='best')
plt.show()
plt.clf()

## Centré sur la bonne période

plt.hist(df_lsc_co2['TIME_DIFF'],label='Coincidence_with_ch2_50d', histtype='step',bins=np.linspace(0,200000,200) )
plt.hist(df_lsc_co4['TIME_DIFF'],label='Coincidence_with_ch4_80d', histtype='step',bins=np.linspace(0,200000,200) )
plt.title('Coincidence_time')
plt.xlabel('Coincidence_time'); plt.ylabel('Counts')
plt.legend(loc='best')
plt.show()
plt.clf()

### Figure 2D Energie dans le liquide scintillateur en fonction de la différence du temps d'arrivée 

plt.hist2d(df_lsc_co2['TIME_DIFF'],df_lsc_co2['ENERGY'], bins=[np.linspace(0,240000,30),np.linspace(0,1000,30)])
plt.xlabel('Time_difference_between_LSC&CH2'); plt.ylabel('ENERGY')
plt.title('Energy_LSC_versus_Time_difference')
plt.show()
plt.clf()

plt.hist2d(df_lsc_co4['TIME_DIFF'],df_lsc_co4['ENERGY'], bins=[np.linspace(0,240000,30),np.linspace(0,1000,30)])
plt.xlabel('Time_difference_between_LSC&CH4'); plt.ylabel('ENERGY')
plt.title('Energy_LSC_versus_Time_difference')
plt.show()
plt.clf()


### Figure 2D Energie dans le cristal en fonction de la différence du temps d'arrivée 
plt.hist2d(df_lsc_co2['TIME_DIFF'],df_lsc_co2['ENERGY_CO'], bins=[np.linspace(0,240000,30),np.linspace(0,3000,30)])
plt.xlabel('Time_difference_between_LSC&CH2'); plt.ylabel('ENERGY')
plt.title('Energy_CH2_versus_Time_difference')
plt.show()
plt.clf()

plt.hist2d(df_lsc_co4['TIME_DIFF'],df_lsc_co4['ENERGY_CO'], bins=[np.linspace(0,240000,30),np.linspace(0,3000,30)])
plt.xlabel('Time_difference_between_LSC&CH4'); plt.ylabel('ENERGY')
plt.title('Energy_CH4_versus_Time_difference')
plt.show()
plt.clf()