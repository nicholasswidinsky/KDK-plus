#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr 16 16:39:46 2024

@author: arnaudlemaire
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import csv

def csvReader(filename):
    board,channel,time,energy,energyShort,flags,probeCode,waveform = [],[],[],[],[],[],[],[]

    with open(filename) as csvDataFile:
            csv_reader = csv.reader(csvDataFile, delimiter = ';')
            csv_reader.__next__()   #skips the first line in the document
            for row in csv_reader:
                #print(row)
                board.append(int(row[0]))
                channel.append(int(row[1]))
                time.append(int(row[2]))
                energy.append(int(row[3]))
                energyShort.append(int(row[4]))
                flags.append(row[5])
                probeCode.append(int(row[6]))
                waveform.append(list(map(int,row[7:])))
                
    df = pd.DataFrame()
    
    df['Board'],df['Channel'],df['Time'],df['Energy'],df['Energy Short'],df['Flags'],df['Probe Cobe'],df['Waveform'] = board,channel,time,energy,energyShort,flags,probeCode,waveform
    return df


file = '/Volumes/KDK+_Arnaud/KDK+/LSC_campaign/DAQ/LLT_0.5ml_2M_waveform_pileup/RAW/SDataR_LLT_0.5ml_2M_waveform_pileup.CSV'

df = csvReader(file)


#%%

#print(df['Flags'])

df0 = df[df['Channel'] == 0 ]

nb_events= len(df0['Energy'])

## Select the events with 0xc000 flags: pile-up flag that we want to investigate

df_flag = df0[df0['Flags'] == '0xc000']

print(df_flag['Flags'])

nb_events_flag= len(df_flag['Energy'])

print('Nb_events =' + str(nb_events) + ' & '+ str(nb_events_flag) + ' with 0xc000 flag')

#%%

event_number = 74474

nb_ech = len(df0['Waveform'][event_number])

time = np.linspace(0,992, nb_ech)


print(df0['Waveform'][event_number])
print('nb_events='+str(len(df0['Waveform'][event_number])))

print(sum(df0['Waveform'][event_number][0:43]))

threshold = [13250] * len(time)
plt.plot(time[30:90],df0['Waveform'][event_number][30:90],label='pulse shape')


plt.plot(time[30:90],threshold[30:90],label='threshold')
plt.legend(loc='best',fontsize= 'small')
plt.xlabel('Time_ns'); plt.ylabel('ADCs')
plt.title('Flag:' + str(df0['Flags'][event_number]))

#%%

# On veut plot 4 event, deux pile up et deux normaux

pileup1 = 74474
pileup2 = 1199

ev1= 222
ev2= 74479

nb_ech = len(df0['Waveform'][pileup1])
time = np.linspace(0,992, nb_ech)
print('nb_events='+str(len(df0['Waveform'][pileup1])))

baseline1 = sum(df0['Waveform'][pileup1][0:43])/43
baseline2 = sum(df0['Waveform'][pileup2][0:43])/43
baseline3 = sum(df0['Waveform'][ev1][0:43])/43
baseline4 = sum(df0['Waveform'][ev2][0:43])/43

b1 = 496*[baseline1]
b2 = 496*[baseline2]
b3 = 496*[baseline3]
b4 = 496*[baseline4]

th1= 496*[baseline1 - 300]
th2= 496*[baseline2 - 300]
th3= 496*[baseline3 - 300]
th4= 496*[baseline4 - 300]

fig, axs = plt.subplots(2, 2, figsize=(12,9),layout='constrained')

axs[0, 0].plot(time[40:90], b1[40:90] , 'black')
axs[0, 0].plot(time[40:90], th1[40:90], 'red')
axs[0, 0].plot(time[40:90], df0['Waveform'][pileup1][40:90], 'orange')
axs[0, 0].set_title( 'pile-up flag: '+str(df0['Flags'][pileup1]), fontsize= 'x-large')
#axs[0, 0].set(ylabel='ACDs')


axs[0, 1].plot(time[40:90], b2[40:90] , 'black', label='baseline')
axs[0, 1].plot(time[40:90], th2[40:90], 'red',label='trigger threshold')
axs[0, 1].plot(time[40:90], df0['Waveform'][pileup2][40:90],'orange', label='input')
axs[0, 1].set_title('pile-up flag: '+str(df0['Flags'][pileup2]), fontsize= 'x-large')
axs[0, 1].legend(loc='best',fontsize= 'x-large')

axs[1, 0].plot(time[40:90], b1[40:90] , 'black')
axs[1, 0].plot(time[40:90], th3[40:90], 'red')
axs[1, 0].plot(time[40:90], df0['Waveform'][ev1][40:90],'orange')
axs[1, 0].set_title('fine flag: '+str(df0['Flags'][ev1]), fontsize= 'x-large')
#axs[1, 0].set(xlabel='time_ns')
#axs[1, 0].set(ylabel='ACDs')

axs[1, 1].plot(time[40:90], b1[40:90] , 'black')
axs[1, 1].plot(time[40:90], th4[40:90], 'red')
axs[1, 1].plot(time[40:90], df0['Waveform'][ev2][40:90],'orange')
axs[1, 1].set_title('fine flag: '+str(df0['Flags'][ev2]), fontsize= 'x-large')
#axs[1, 1].set(xlabel='time_ns')

fig.suptitle('Flag 0xc000: peak overshoot tagged as a pile-up \n', fontsize=16)
fig.supxlabel('time (ns)', fontsize= 'xx-large')
fig.supylabel('ADC channel', fontsize= 'xx-large')

